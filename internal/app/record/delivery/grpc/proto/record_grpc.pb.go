// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: internal/app/record/delivery/grpc/proto/record.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Records_GetAllUrls_FullMethodName     = "/grpc.Records/GetAllUrls"
	Records_GetOriginalURL_FullMethodName = "/grpc.Records/GetOriginalURL"
	Records_ShortenURL_FullMethodName     = "/grpc.Records/ShortenURL"
)

// RecordsClient is the client API for Records service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecordsClient interface {
	GetAllUrls(ctx context.Context, in *GetAllUrlsRequest, opts ...grpc.CallOption) (*GetAllUrlsResponse, error)
	GetOriginalURL(ctx context.Context, in *GetOriginalURLRequest, opts ...grpc.CallOption) (*GetOriginalURLResponse, error)
	ShortenURL(ctx context.Context, in *ShortenURLRequest, opts ...grpc.CallOption) (*ShortenURLResponse, error)
}

type recordsClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordsClient(cc grpc.ClientConnInterface) RecordsClient {
	return &recordsClient{cc}
}

func (c *recordsClient) GetAllUrls(ctx context.Context, in *GetAllUrlsRequest, opts ...grpc.CallOption) (*GetAllUrlsResponse, error) {
	out := new(GetAllUrlsResponse)
	err := c.cc.Invoke(ctx, Records_GetAllUrls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordsClient) GetOriginalURL(ctx context.Context, in *GetOriginalURLRequest, opts ...grpc.CallOption) (*GetOriginalURLResponse, error) {
	out := new(GetOriginalURLResponse)
	err := c.cc.Invoke(ctx, Records_GetOriginalURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordsClient) ShortenURL(ctx context.Context, in *ShortenURLRequest, opts ...grpc.CallOption) (*ShortenURLResponse, error) {
	out := new(ShortenURLResponse)
	err := c.cc.Invoke(ctx, Records_ShortenURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordsServer is the server API for Records service.
// All implementations must embed UnimplementedRecordsServer
// for forward compatibility
type RecordsServer interface {
	GetAllUrls(context.Context, *GetAllUrlsRequest) (*GetAllUrlsResponse, error)
	GetOriginalURL(context.Context, *GetOriginalURLRequest) (*GetOriginalURLResponse, error)
	ShortenURL(context.Context, *ShortenURLRequest) (*ShortenURLResponse, error)
	mustEmbedUnimplementedRecordsServer()
}

// UnimplementedRecordsServer must be embedded to have forward compatible implementations.
type UnimplementedRecordsServer struct {
}

func (UnimplementedRecordsServer) GetAllUrls(context.Context, *GetAllUrlsRequest) (*GetAllUrlsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUrls not implemented")
}
func (UnimplementedRecordsServer) GetOriginalURL(context.Context, *GetOriginalURLRequest) (*GetOriginalURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOriginalURL not implemented")
}
func (UnimplementedRecordsServer) ShortenURL(context.Context, *ShortenURLRequest) (*ShortenURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortenURL not implemented")
}
func (UnimplementedRecordsServer) mustEmbedUnimplementedRecordsServer() {}

// UnsafeRecordsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordsServer will
// result in compilation errors.
type UnsafeRecordsServer interface {
	mustEmbedUnimplementedRecordsServer()
}

func RegisterRecordsServer(s grpc.ServiceRegistrar, srv RecordsServer) {
	s.RegisterService(&Records_ServiceDesc, srv)
}

func _Records_GetAllUrls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUrlsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordsServer).GetAllUrls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Records_GetAllUrls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordsServer).GetAllUrls(ctx, req.(*GetAllUrlsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Records_GetOriginalURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOriginalURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordsServer).GetOriginalURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Records_GetOriginalURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordsServer).GetOriginalURL(ctx, req.(*GetOriginalURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Records_ShortenURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortenURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordsServer).ShortenURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Records_ShortenURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordsServer).ShortenURL(ctx, req.(*ShortenURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Records_ServiceDesc is the grpc.ServiceDesc for Records service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Records_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Records",
	HandlerType: (*RecordsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllUrls",
			Handler:    _Records_GetAllUrls_Handler,
		},
		{
			MethodName: "GetOriginalURL",
			Handler:    _Records_GetOriginalURL_Handler,
		},
		{
			MethodName: "ShortenURL",
			Handler:    _Records_ShortenURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/app/record/delivery/grpc/proto/record.proto",
}
